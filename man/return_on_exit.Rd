% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{return_on_exit}
\alias{return_on_exit}
\title{Evaluate a function and return the result on exit in the calling environment}
\usage{
return_on_exit(fun, ..., env = parent.frame())
}
\arguments{
\item{fun}{Function to evaluate upon exit and return the result from the
calling function}

\item{...}{Arguments to pass to the function}

\item{env}{Environment to evaluate the function in and to return from. The
function will have access to the variables in this environment and their
state at the time of the exit (not the time of the function call). If you
want to pass variable values at the time of the function call, use \code{...}}
}
\value{
The result of the function call
}
\description{
return_on_exit() can be called from within a parent function to set a return
value when the parent function exits for whatever reason. This is useful when
you want to specify a conditional return value even if a function exits
abruptly.
}
\examples{
\dontrun{
# function to evaluate on exit
f <- function(y, ...) {
  dots <- list(...)
  if ("x" \%in\% names(dots)) {
    x <- dots$x
  }
  x + y
}

# calling function
g <- function(...) {
 x <- 1    # current value of x; will not be used if it changes before g exists
 y <- 10   # value of y to pass to f, will be used as is

 # setup conditional return
 return_on_exit(f, y, ...)

 # do some work
 for (i in 1:1000000) {
   x <- i
   if (i == 100) stop("Error, but I will return something!")
 }


 # this will not be executed
 cat("This will not be printed")
 return("This will not be returned")
}

# calling g() will return 110
g()

# calling g() with x as an argument will return 30
# because x is passed to f() via the dots argument
g(x = 20)
}

}
